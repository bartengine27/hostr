---
- name: Install dependencies
  apt:
    pkg:
      - gnupg
    state: latest
    update_cache: yes
- name: Update repository
  apt_repository:
    repo: 'ppa:git-core/ppa'
    state: present   
- name: Install git, pip3, etc.
  apt:
    pkg: 
      - git
      #- python3-pip
    state: present
    update_cache: yes
- name: Upgrade  pyopenssl to solve error "has no attribute 'X509_V_FLAG_NOTIFY_POLICY'"
  ansible.builtin.shell: |
    apt remove python3-pip -y
    wget https://bootstrap.pypa.io/get-pip.py
    python3 get-pip.py
    apt remove python3-openssl -y
    pip install pyOpenSSL --upgrade
- name: Install cryptography python package, necessary to generate certificates with ansible
  ansible.builtin.pip:
    name: cryptography              
#https://docs.ansible.com/ansible/latest/collections/community/crypto/docsite/guide_selfsigned.html
#https://computingforgeeks.com/generate-openssl-self-signed-certificates-with-ansible/
#TODO don't use firefox for now, install our own CA - see stack overflow link below for a summary
#https://stackoverflow.com/questions/59738140/why-is-firefox-not-trusting-my-self-signed-certificate

- name: Create the SSL password file referenced in the nginx conf file
  ansible.builtin.file:
    path: /etc/keys/
    state: directory
    owner: root
    group: root
    mode: '0644'     
- name: Write the private key password to the SSL password file referenced in the nginx conf file
  ansible.builtin.copy:
    dest: "/etc/keys/global.pass"
    content: |
      {{ client_private_key_passphrase }}
- name: Create the snippets folder if it does not exist
  ansible.builtin.file:
    path: /etc/nginx/snippets/
    state: directory
    owner: root
    group: root
    mode: '0644'     
- name: Create the self-signed.conf file which references our key and crt.
  ansible.builtin.copy:    
    dest: "/etc/nginx/snippets/self-signed.conf"
    content: |
      ssl_certificate {{ ssl_certificate }};
      ssl_certificate_key {{ ssl_certificate_key }};
    owner: root
    group: root
    mode: '0644'   
- name: Create the ssl-params file with security-enhancing SSL parameters. 
  ansible.builtin.copy:    
    dest: "/etc/nginx/snippets/ssl-params.conf"
    content: |
      ssl_protocols TLSv1.2 TLSv1.3;
      ssl_prefer_server_ciphers on;
      ssl_dhparam /etc/nginx/ssl/dhparam.pem;
      ssl_ciphers "ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384";
      ssl_session_timeout 1d;
      ssl_session_cache shared:SSL:50m;
      ssl_stapling on;
      ssl_stapling_verify on;
      add_header Strict-Transport-Security "max-age=31536000";
    owner: root
    group: root
    mode: '0644'
- name: Create /etc/nginx/ssl/dhparam.pem
  ansible.builtin.shell: |
    mkdir -p /etc/nginx/ssl/
    openssl dhparam -out /etc/nginx/ssl/dhparam.pem 2048
- name: Update apt cache
  ansible.builtin.apt:
    update_cache: yes
    cache_valid_time: 3600  # Cache is considered valid for 1 hour

- name: Install NGINX
  ansible.builtin.apt:
    name: nginx
    state: present
- name: Deploy NGINX configuration
  ansible.builtin.template:
    src: proxyserver.nginx.conf.j2
    dest: /etc/nginx/nginx.conf
    owner: root
    group: root
    mode: '0644'
- name: Ensure NGINX is running and enabled
  ansible.builtin.service:
    name: nginx
    state: restarted
    enabled: yes
- name: Wait for NGINX to be fully started
  wait_for:
    path: "/lib/systemd/system/nginx.service"
    state: started
    delay: 5
    timeout: 60   

- name: Generate PKCS12 file to import in your browser
  openssl_pkcs12:
    action: export
    friendly_name: "{{ project_domain }}"
    certificate_path: "{{ ssl_certificate }}"
    privatekey_path: "{{ ssl_certificate_key }}"
    privatekey_passphrase: "{{ client_private_key_passphrase }}"
    path: "{{ ssl_certificate_pkcs12 }}"

- name: Fetch server.p12 file so you can upload it to your Firefox trust store - no password, import in Windows "Trusted Root Certification Authorities" and restart Firefox
  fetch:
    src: "{{ ssl_certificate_pkcs12 }}"
    dest: nginx.p12
    flat: yes
- name: Fetch server pem certificate to install on Ubuntu
  fetch:
    src: "{{ ssl_certificate }}"
    dest: nginx.crt
    flat: yes      
- name: Install the server.p12 file in the Windows Certificate Store - untested
  delegate_to: localhost
  win_certificate_store:
    path: nginx.p12
    #password: 'YourPFXPassword'  # Ensure this is secured appropriately
    state: present
    store_location: LocalMachine
    store_name: Root  # Root is the store name for Trusted Root Certification Authorities
  when: ansible_os_family == "Windows"  
- name: Install the server.p12 file on Ubuntu - untested
  delegate_to: localhost
  become: True
  shell: |    
    cp nginx.crt /usr/local/share/ca-certificates/
    update-ca-certificates
  when: ansible_distribution == 'Ubuntu' and ansible_distribution_version == '20.04'
  args:
    executable: /bin/bash

- name: Obtain Let's Encrypt certificate
  include_role:
    name: geerlingguy.certbot
  vars:
    certbot_auto_renew: true
    certbot_auto_renew_hour: "3"
    certbot_auto_renew_minute: "30"
    certbot_create_if_missing: true
    certbot_create_method: standalone
    certbot_admin_email: bart.deboeck@xenopz.com
    certbot_certs:
      - domains:
          - pointedwords.be
  when: proxy_lets_encrypt_enabled