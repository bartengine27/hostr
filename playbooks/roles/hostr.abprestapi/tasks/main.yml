- name: Install dependencies
  ansible.builtin.apt:
    pkg:
      - gnupg
    state: latest
    update_cache: true
- name: Update repository
  ansible.builtin.apt_repository:
    repo: 'ppa:git-core/ppa'
    state: present
- name: Install git, pip3, etc.
  ansible.builtin.apt:
    pkg:
      - git
      - python3-pip
    state: present
    update_cache: true
- name: Install cryptography python package, necessary to generate certificates with ansible
  ansible.builtin.pip:
    name: cryptography
- name: Install the ABP CLI tool
  ansible.builtin.shell: |
    dotnet tool install -g Volo.Abp.Cli
- name: "Clone the source code"
  ansible.builtin.git:
    repo: "{{ http_api_public_repo }}"
    dest: "{{ http_api_install_folder }}"
    clone: true
    update: true
    depth: 1
# https://docs.ansible.com/ansible/latest/collections/community/crypto/docsite/guide_selfsigned.html
# https://computingforgeeks.com/generate-openssl-self-signed-certificates-with-ansible/
# TODO don't use firefox for now, install our own CA - see stack overflow link below for a summary
# https://stackoverflow.com/questions/59738140/why-is-firefox-not-trusting-my-self-signed-certificate
# TODO remove hard coded password
- name: Create private key (RSA, 4096 bits)
  community.crypto.openssl_privatekey:
    path: "{{ webserver_install_folder }}certificate.key"
    format: "pkcs8"
    passphrase: cars.be
    cipher: auto
- name: Create a self-signed certificate
  community.crypto.x509_certificate:
    path: "{{ webserver_install_folder }}certificate.pem"
    privatekey_path: "{{ webserver_install_folder }}certificate.key"
    privatekey_passphrase: cars.be
    provider: selfsigned
- name: Install dotnet tools
  ansible.builtin.shell: |
    dotnet tool install --global dotnet-counters
# dotnet build the.sln -c Release
# dotnet test -c Release --no-build
# dotnet publish the\app.csproj --no-build -c Release
# ASPNETCORE_URLS=http://*:5000 ./Be.Cars.Blazor -> check the systemctl service file
- name: "Publish the HTTP API project"
  ansible.builtin.shell: |
    mkdir "{{ http_api_install_folder }}"build
    cd "{{ http_api_install_folder }}"
    rm -Rf "{{ http_api_install_folder }}"build
    dotnet clean "{{ abp_project_name }}".sln
    /root/.dotnet/tools/abp install-libs
    dotnet build -c Release  --self-contained false "{{ abp_project_name }}".sln
    dotnet publish  src/"{{ abp_project_name }}".HttpApi.Host/"{{ abp_project_name }}".HttpApi.Host.csproj -c Release --no-build -o "{{ http_api_install_folder }}"build
  register: publish_http_api_result
  retries: 5
  delay: 10
  until: publish_http_api_result.rc == 0
- name: Create the directory for the virtual file system (hard coded for now)
  ansible.builtin.file:
    path: "{{ webserver_install_folder }}{{ abp_project_name }}.Domain.Shared/"
    state: directory
    owner: root
    group: root
- name: Copy httpapiserver.service.j2 drop-in
  ansible.builtin.template:
    src: httpapiserver.service.j2
    dest: /etc/systemd/system/httpapiserver.service
    owner: root
    group: root
    mode: 0644
- name: Copy appsettings.json
  ansible.builtin.template:
    src: httpapiserver.appsettings.json.j2
    dest: "{{ http_api_install_folder }}build/appsettings.{{ asp_net_core_environment }}.json"
    owner: root
    group: root
    mode: 0644
- name: Reload systemctl
  ansible.builtin.command: systemctl daemon-reload
- name: Make sure a service unit is running
  ansible.builtin.systemd_service:
    # start after reboot
    enabled: true
    # restart now so we don't have to reboot the machine
    # restart and not start: if we were running before the daemon-reload, we have to restart to get the new config
    state: restarted
    name: httpapiserver
