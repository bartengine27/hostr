---
- name: Upload new openvz template with minimal options
  community.general.proxmox_template:
    node: "{{ proxmox_node }}"
    api_user: "{{ proxmox_api_user }}"
    api_token_id: "{{ proxmox_api_token_id }}"
    api_token_secret: "{{ proxmox_api_token }}"
    api_host: "{{ proxmox_ip_address }}"
    src: ./ubuntu-14.04-x86_64.tar.gz
  tags: example_upload

- name: Download proxmox appliance container template - https://pve.proxmox.com/wiki/Linux_Container
  community.general.proxmox_template:
    node: "{{ proxmox_node }}"
    api_user: "{{ proxmox_api_user }}"
    api_token_id: "{{ proxmox_api_token_id }}"
    api_token_secret: "{{ proxmox_api_token }}"
    api_host: "{{ proxmox_ip_address }}"
    storage: local
    content_type: vztmpl
    #template: ubuntu-23.04-standard_23.04-1_amd64.tar.zst
    template: ubuntu-20.04-standard_20.04-1_amd64.tar.gz
  tags: vm_upload

## PROXMOX bridge config
- name: Add network bridge configuration to Proxmox (it might be better to copy files into /etc/network/interfaces.d/)
  blockinfile:
    path: /etc/network/interfaces
    #reverse vmbr0 and vrmbr1 - iface is eth0 for Hyper-V VMs - adds to config, does not replace -> use bridge command?
    block: |
      auto lo
      iface lo inet loopback

      iface eno1 inet manual

      iface eno2 inet manual

      auto vmbr0
      iface vmbr0 inet static
              address {{ proxmox_host }}/24
              gateway {{ proxmox_gateway }}
              bridge-ports eno1
              bridge-stp off
              bridge-fd 0
              hwaddress A4:BF:01:13:75:82

      iface vmbr0 inet6 static
              address 2001:41d0:a:1c20::/64
              gateway 2001:41d0:a:1cff:ff:ff:ff:ff

      auto vmbr1
      iface vmbr1 inet static
              address 192.168.1.1/16
              bridge-ports none
              bridge-stp off
              bridge-fd 0
      "# {mark} ANSIBLE MANAGED BLOCK vmbr1"
  vars:    
    proxmox_host: "{{ lookup('ansible.builtin.env', 'PROXMOX_PUBLIC_IP') }}"
    proxmox_gateway: "{{ lookup('ansible.builtin.env', 'PROXMOX_PUBLIC_GATEWAY') }}"      
  delegate_to: "{{ proxmox_host }}"
  become: True
  tags: vm_init_disabled

- name: Apply network configuration
  command: ifup vmbr0
  ignore_errors: True
  vars:    
    proxmox_host: "{{ lookup('ansible.builtin.env', 'PROXMOX_PUBLIC_IP') }}"
  delegate_to: "{{ proxmox_host }}"
  tags: vm_init

- name: Restart networking service to apply configuration
  systemd:
    name: networking
    state: restarted
  become: True
  vars:    
    proxmox_host: "{{ lookup('ansible.builtin.env', 'PROXMOX_PUBLIC_IP') }}"
  delegate_to: "{{ proxmox_host }}"
  tags: vm_init

## end PROXMOX bridge config

- name: Create a new container to run sw, dockers etc. on - the container/vm is based on an uploaded Proxmox template
  community.general.proxmox:
    # vars_files:
    # vmid: "{{ proxmox_vm_id }}"
    vmid: "{{ item['id'] }}"
    tags: "{{ item['group'] }}"
    node: "{{ proxmox_node }}"
    api_user: "{{ proxmox_api_user }}"
    api_token_id: "{{ proxmox_api_token_id }}"
    api_token_secret: "{{ proxmox_api_token }}"
    api_host: "{{ proxmox_ip_address }}"
    password: bartbart
    hostname: cars.be.vm
    disk: "{{ proxmox_local_storage }}:20"
    storage: "{{ proxmox_local_storage }}"
    memory: 4096
    ostemplate: 'local:vztmpl/ubuntu-20.04-standard_20.04-1_amd64.tar.gz'
    # should query gw from proxmox? ask proxmox for a free ip address?
    netif: '{"net0":"name=eth0,gw={{ firewall_ip }},ip={{ item["ip"] }}/24,bridge=vmbr0"}'    
    pubkey: "{{ lookup('ansible.builtin.env', 'SSH_PUB_KEY') }}"
    state: present
    features:
     # enable nesting, otherwise docker containers won't run
     # if not enabled, you will *not* get errors after starting containers
      - nesting=1
  loop: "{{ proxmox_vms }}"
  tags: vm_init

# this should become a VM with pfSense
# https://docs.ansible.com/ansible/latest/collections/community/general/proxmox_kvm_module.html
- name: Create the Firewall vm_init
  community.general.proxmox_kvm:
    api_user: "{{ proxmox_api_user }}"
    api_token_id: "{{ proxmox_api_token_id }}"
    api_token_secret: "{{ proxmox_api_token }}"
    api_host: "{{ proxmox_ip_address }}"
    name: firewall
    node: "{{ proxmox_node }}"
    net: 
      net1:"name=eth0,gw={{ item["gateway"] }},ip={{ item["additional_ip"] }}/24,hwaddr={{ item["additional_ip_mac"] }},bridge=vmbr1"
      net0:"name=eth1,ip={{ item["ip"] }}/24,bridge=vmbr0"
    sata:
      sata0: 'VMs_LVM:40,format=raw'
    bios: ovmf
    memory: 4096
    efidisk0:
      storage: VMs_LVM
      format: raw
      efitype: 4m
      pre_enrolled_keys: false
  loop: "{{ proxmox_public_vms }}"
  tags: vm_init

- name: Attach unattend ISO
  community.general.proxmox_disk:
    api_user: "{{ proxmox_api_user }}"
    api_token_id: "{{ proxmox_api_token_id }}"
    api_token_secret: "{{ proxmox_api_token }}"
    api_host: "{{ proxmox_ip_address }}"
    vmid: "{{ item['id'] }}"
    disk: ide2
    media: cdrom
    iso_image: "iso:iso/{{ vm_name }}_unattend.iso"
    state: present
  loop: "{{ proxmox_public_vms }}"
  tags: vm_init

- name: Create a new public container to run dockers on - the container/vm is based on an uploaded Proxmox template
  community.general.proxmox:
    # vars_files:
    # vmid: "{{ proxmox_vm_id }}"
    vmid: "{{ item['id'] }}"
    tags: "{{ item['group'] }}"
    node: "{{ proxmox_node }}"
    api_user: "{{ proxmox_api_user }}"
    api_token_id: "{{ proxmox_api_token_id }}"
    api_token_secret: "{{ proxmox_api_token }}"
    api_host: "{{ proxmox_ip_address }}"
    password: bartbart
    hostname: cars.be.vm
    disk: "{{ proxmox_local_storage }}:20"
    storage: "{{ proxmox_local_storage }}"
    memory: 4096
    ostemplate: 'local:vztmpl/ubuntu-20.04-standard_20.04-1_amd64.tar.gz'
    # should query gw from proxmox? ask proxmox for a free ip address?
    # keys that you can use: check conf files in /etc/pve/nodes/proxmox/lxc on the proxmox host
    # note: no gateway for eth1 (LAN traffic via bridge vmbr1)
    netif: '{"net0":"name=eth0,gw={{ item["gateway"] }},ip={{ item["additional_ip"] }}/24,hwaddr={{ item["additional_ip_mac"] }},bridge=vmbr1","net1":"name=eth1,ip={{ item["ip"] }}/24,bridge=vmbr0"}'
    pubkey: "{{ lookup('ansible.builtin.env', 'SSH_PUB_KEY') }}"
    state: present
    features:
     # enable nesting, otherwise docker containers won't run
     # if not enabled, you will *not* get errors after starting containers
      - nesting=1
  loop: "{{ proxmox_public_vms }}"
  tags: vm_init

- name: Start our new container
  community.general.proxmox:
    vmid: "{{ item['id'] }}"
    node: "{{ proxmox_node }}"
    api_user: "{{ proxmox_api_user }}"
    api_token_id: "{{ proxmox_api_token_id }}"
    api_token_secret: "{{ proxmox_api_token }}"
    api_host: "{{ proxmox_ip_address }}"
    state: started
    # wait so we know that SSH is working
    # timeout: 900
  loop: "{{ proxmox_vms + proxmox_public_vms}}"
  tags: vm_init

- name: Sleep for x seconds to wait for the new container(s)
  ansible.builtin.wait_for:
    timeout: 30
  tags: vm_init

  # public containers need an appropriate netplan: ssh into the proxmox host and execute "pct push 500 /tmp/00-netcfg.yaml /etc/netplan/00-netcfg.yaml"
  # and /tmp/00-netcfg.yaml is
  # network:
  #   version: 2
  #   renderer: networkd
  #   ethernets:
  #     eth0:
  #       dhcp4: no
  #       dhcp6: no
  #       addresses:
  #         - 178.32.42.75/32
  #       nameservers:
  #         addresses:
  #           - 208.67.222.222
  #           - 208.67.220.220
  #       optional: true
  #       routes:
  #         - to: 0.0.0.0/0
  #           via: 37.187.28.254
  #           on-link: true

- name: Create the netplan file that will be copied to the firewall.
  ansible.builtin.copy:    
    dest: "/tmp/00-netcfg.yaml"
    content: |
      network:
        version: 2
        renderer: networkd
        ethernets:
          eth1:
            dhcp4: no
            dhcp6: no
            addresses:
              - {{ item['additional_ip'] }}/32
            nameservers:
              addresses:
                - {{ proxmox_preferred_dns }}
                - {{ proxmox_alternate_dns }}
            optional: true
            routes:
              - to: 0.0.0.0/0
                via: {{ proxmox_gateway }}
                on-link: true
    owner: root
    group: root
    mode: '0644'
  vars:    
    proxmox_host: "{{ lookup('ansible.builtin.env', 'PROXMOX_PUBLIC_IP') }}"
    proxmox_gateway: "{{ lookup('ansible.builtin.env', 'PROXMOX_PUBLIC_GATEWAY') }}"
  delegate_to: "{{ proxmox_host }}"
  loop: "{{ proxmox_public_vms }}"
  tags: vm_init

- name: Restart the Proxmox host and wait until it is responding to commands again
  ansible.builtin.reboot:
  vars:    
    proxmox_host: "{{ lookup('ansible.builtin.env', 'PROXMOX_PUBLIC_IP') }}"    
  delegate_to: "{{ proxmox_host }}"
  tags: vm_init

#TBD firewall is installed manually

# - name: Push the netplan configuration to the firewall container 
#   ansible.builtin.shell: >
#     pct push {{ container_id }} /tmp/00-netcfg.yaml /etc/netplan/00-netcfg.yaml
#   delegate_to: "{{ proxmox_host }}"
#   vars:
#     container_id: "500"
#     proxmox_host: "{{ lookup('ansible.builtin.env', 'PROXMOX_PUBLIC_IP') }}"
#   tags: vm_init

# - name: Create the network interfaces file that will be copied to the firewall.
#   ansible.builtin.copy:
#     dest: "/tmp/interfaces"
#     content: |
#       auto eth1
#       iface eth1 inet static
#           address {{ item['ip'] }}
#           netmask 255.255.0.0
#           gateway {{ item['ip_gateway'] }}
#   vars:    
#     proxmox_host: "{{ lookup('ansible.builtin.env', 'PROXMOX_PUBLIC_IP') }}"
#   delegate_to: "{{ proxmox_host }}"
#   loop: "{{ proxmox_public_vms }}"
#   tags: vm_init          

# - name: Push the network interfaces to the firewall container 
#   ansible.builtin.shell: >
#     pct push {{ container_id }} /tmp/interfaces /etc/network/interfaces
#   delegate_to: "{{ proxmox_host }}"
#   vars:
#     container_id: "500"
#     proxmox_host: "{{ lookup('ansible.builtin.env', 'PROXMOX_PUBLIC_IP') }}"
#   tags: vm_init

- name: Stop our container
  community.general.proxmox:
    vmid: "{{ item['id'] }}"
    node: "{{ proxmox_node }}"
    api_user: "{{ proxmox_api_user }}"
    api_token_id: "{{ proxmox_api_token_id }}"
    api_token_secret: "{{ proxmox_api_token }}"
    api_host: "{{ proxmox_ip_address }}"
    # for some reason, the http endpoint containers stop a bit slower
    timeout: 60
    state: stopped
  loop: "{{ proxmox_vms + proxmox_public_vms }}"
  tags: vm_stop  

- name: Start our container
  community.general.proxmox:
    vmid: "{{ item['id'] }}"
    node: "{{ proxmox_node }}"
    api_user: "{{ proxmox_api_user }}"
    api_token_id: "{{ proxmox_api_token_id }}"
    api_token_secret: "{{ proxmox_api_token }}"
    api_host: "{{ proxmox_ip_address }}"
    state: started
  loop: "{{ proxmox_vms + proxmox_public_vms }}"
  tags: vm_start

- name: Restart our container
  community.general.proxmox:
    vmid: "{{ item['id'] }}"
    node: "{{ proxmox_node }}"
    api_user: "{{ proxmox_api_user }}"
    api_token_id: "{{ proxmox_api_token_id }}"
    api_token_secret: "{{ proxmox_api_token }}"
    api_host: "{{ proxmox_ip_address }}"
    state: restarted
  register: vm_restart_result
  retries: 5
  delay: 5
  until: vm_restart_result.invocation.module_args.state == 'restarted'
  loop: "{{ proxmox_vms + proxmox_public_vms}}"
  tags: vm_restart

- name: Remove our container, you may have to log off/on in Proxmox before checking removal.
  community.general.proxmox:
    vmid: "{{ item['id'] }}"
    node: "{{ proxmox_node }}"
    api_user: "{{ proxmox_api_user }}"
    api_token_id: "{{ proxmox_api_token_id }}"
    api_token_secret: "{{ proxmox_api_token }}"
    api_host: "{{ proxmox_ip_address }}"
    state: absent
  loop: "{{ proxmox_vms + proxmox_public_vms }}"
  tags: vm_remove

- name: Sleep for x seconds after removing the container
  ansible.builtin.wait_for:
    timeout: 30
  tags: vm_remove