---  
- name: Install dependencies
  apt:
    pkg:
      - gnupg
    state: latest
    update_cache: yes
- name: Update repository
  apt_repository:
    repo: 'ppa:git-core/ppa'
    state: present
- name: Install git, pip3, etc.
  apt:
    pkg: 
      - git
      - python3-pip
      - nodejs
      - npm
    state: present
    update_cache: yes
- name: Install the ABP CLI tool
  ansible.builtin.shell: |
    dotnet tool install -g Volo.Abp.Cli           
- name: "Clone the source code"
  ansible.builtin.git:
    repo: "{{ identityserver_public_repo }}"
    dest: "{{ identityserver_install_folder }}"
    clone: yes
    update: yes
    depth: 1
# full path for abp, after install you need to logout or restart a session if you just installed the .NET SDK -> use the full path
# /root/.dotnet/tools/abp install-libs
# dotnet build the.sln -c Release
# dotnet test -c Release --no-build
# dotnet publish the\app.csproj --no-build -c Release
- name: "Publish the Identityserver-Blazor project"
  ansible.builtin.shell: |        
    mkdir "{{ identityserver_install_folder }}"build
    cd "{{ identityserver_install_folder }}"
    rm -Rf "{{ identityserver_install_folder }}"build
    dotnet clean "{{ abp_project_name }}".sln
    /root/.dotnet/tools/abp install-libs
    dotnet build -c Release  --self-contained false "{{ abp_project_name }}".sln
    dotnet publish  src/"{{ abp_project_name }}".AuthServer/"{{ abp_project_name }}".AuthServer.csproj -c Release --no-build -o "{{ identityserver_install_folder }}"build
  register: publish_is_result
  retries: 5
  delay: 5
  until: publish_is_result.rc == 0        
- name: Create the directory for the virtual file system (hard coded for now)
  ansible.builtin.file:
    path: /webapp/"{{ abp_project_name }}".Domain.Shared/
    state: directory
    owner: root
    group: root
# ASPNETCORE_URLS=http://*:5000 ./Be.Cars.Blazor        
# file module will create a directory if missing
# - name: Create webserver_blazor.service.d directory
#   file:
#     path: /etc/systemd/system/webserver_blazor.service.d/
#     state: directory
#     owner: root
#     group: root
#     mode: 0755
# template module will create a file
- name: Copy identityserver_blazor.service drop-in
  template:
    src: identityserver_blazor.service.j2
    dest: /etc/systemd/system/identityserver_blazor.service
    owner: root
    group: root
    mode: 0644
- name: Copy appsettings.json
  template:
    src: identityserver.appsettings.json.j2
    dest: "{{ identityserver_install_folder }}build/appsettings.{{ asp_net_core_environment }}.json"
    owner: root
    group: root
    mode: 0644
- name: reload systemctl
  command: systemctl daemon-reload
- name: Make sure a service unit is running
  ansible.builtin.systemd_service:
    #start after reboot
    enabled: true
    #restart now so we don't have to reboot the machine
    #restart and not start: if we were running before the daemon-reload, we have to restart to get the new config
    state: restarted
    name: identityserver_blazor